You’re hitting a filesystem error while trying to create the temp cookie file:

Unknown system error -122, open '/tmp/yt-cookies/...txt'

What it means

-122 maps to EDQUOT ⇒ “Disk quota exceeded.”
On Replit this usually happens when /tmp (or your repl disk/inode quota) is full, so fs.writeFileSync can’t create another file.

Why it’s happening

Your flow materializes user cookies to /tmp/yt-cookies/*.txt. If jobs crash or cancel before cleanup, those files accumulate and you eventually run out of space or inodes.

Quick checks (run in the shell)
df -h
du -sh /tmp
ls -l /tmp/yt-cookies | wc -l
du -sh /tmp/yt-cookies

Fixes to apply now

Purge old temp cookie files on boot

// src/startup/cleanup.ts
import fs from "fs"
import path from "path"

export function cleanupTmpCookies() {
  const dir = "/tmp/yt-cookies"
  if (!fs.existsSync(dir)) { return }
  for (const f of fs.readdirSync(dir)) {
    const p = path.join(dir, f)
    try { fs.rmSync(p, { force: true, recursive: false }) } catch {}
  }
}


Call once during server and worker start:

// server entry (e.g., src/app/api/_boot.ts or similar)
import { cleanupTmpCookies } from "@/startup/cleanup"
cleanupTmpCookies()


Make the temp dir if missing and always delete after use

// src/services/youtube.ts
import fs from "fs"
import path from "path"
import crypto from "crypto"

function ensureTmpDir() {
  const dir = "/tmp/yt-cookies"
  if (!fs.existsSync(dir)) { fs.mkdirSync(dir, { recursive: true, mode: 0o700 }) }
  return dir
}

export function createUserCookiesFile(userId: string, text: string) {
  const dir = ensureTmpDir()
  const name = `${userId}-${crypto.randomBytes(6).toString("hex")}.txt`
  const p = path.join(dir, name)
  try {
    fs.writeFileSync(p, text, { mode: 0o600 })
    return p
  } catch (e: any) {
    if (e?.code === "UNKNOWN" && e?.errno === -122) { throw new Error("Disk quota exceeded in /tmp while creating cookie file") }
    throw e
  }
}

export function deleteUserCookiesFile(p: string) {
  try { fs.rmSync(p, { force: true }) } catch {}
}


Use it around yt-dlp execution and guarantee cleanup:

const cookiePath = createUserCookiesFile(userId, cookiesText)
try {
  await runYtDlp(url, { cookiePath })
} finally {
  deleteUserCookiesFile(cookiePath)
}


Limit file proliferation

Reuse a per-user filename: /tmp/yt-cookies/${userId}.txt and overwrite instead of creating many unique files.

Also clean temp artifacts for cancelled/failed jobs in your cancel path.

Improve error surfaced to the user
Wrap the submit handler to convert errno === -122 into a friendly 507/500 with a clear message like “Temporary storage is full—please try again after clearing old jobs.”

If it still fails

Reduce /tmp use: write cookies to a single rotating file, or store them in-memory and only materialize for the yt-dlp call.

Audit other temp outputs (downloaded source, intermediate audio) and delete them immediately after upload to S3.

Once you clear /tmp/yt-cookies and deploy the cleanup+always-finally-delete changes above, this specific error should disappear.