Your job is to download, process, and store YouTube clips with the highest possible visual quality.
Do not lower resolution, bitrate, or re-encode unnecessarily.
All final clips must be ready for TikTok upload and stored in S3 without compression or modification.

1. Download phase
Always download the best available YouTube video up to 1080p60.

Prefer codecs:

Video: h264 or avc1

Audio: aac or m4a

Example:

yt-dlp -f "bv*[height<=1080][fps<=60][vcodec~='(avc1|h264)']+ba[acodec~='(m4a|aac)']/b[ext=mp4]" \
  --merge-output-format mp4 -o "%(id)s.%(ext)s" "YOUTUBE_URL"
2. Audio for transcription
Never re-encode the video just to extract audio.

Extract audio-only with:

ffmpeg -i "input.mp4" -vn -c:a copy "audio.m4a"
Use this file for transcription (OpenAI, Whisper, etc.).

Keep the original video untouched for clipping.

3. Clip generation
When creating temporary or scored clips, use stream copy (no re-encoding) whenever possible:

ffmpeg -ss START -to END -i "input.mp4" -c copy -avoid_negative_ts make_zero "clip_raw.mp4"
This preserves the source quality exactly.

Only re-encode in the final export step if resizing or cropping.

4. Final export (once only)
If you need to create a final version for TikTok or public use:

Encode only once with:

H.264 (libx264)

CRF 18–22

preset medium/slow

fps ≤ 60 (match source)

Audio: AAC 160–192 kbps, 44.1 kHz

Add -movflags +faststart

Example:

ffmpeg -ss START -to END -i "input.mp4" \
  -c:v libx264 -preset medium -crf 20 -pix_fmt yuv420p \
  -c:a aac -b:a 192k -ar 44100 -movflags +faststart \
  "clip_final.mp4"
5. TikTok format (optional vertical output)
If a 9:16 format is needed:

-vf "crop=ih*9/16:ih,scale=1080:1920:force_original_aspect_ratio=decrease,\
     pad=1080:1920:(ow-iw)/2:(oh-ih)/2:color=black,format=yuv420p"
6. S3 upload
Always upload the final encoded file (clip_final.mp4) — not intermediates.

Do not reprocess, transcode, or compress before upload.

Use binary upload mode:

s3.upload_file("clip_final.mp4", bucket_name, f"clips/{video_id}/{clip_name}.mp4",
               ExtraArgs={'ContentType': 'video/mp4', 'ACL': 'public-read'})
Confirm that the uploaded file size matches the local file size (no silent truncation).

7. Verification (optional but recommended)
Before and after upload, run:

ffprobe -v error -select_streams v:0 \
  -show_entries stream=width,height,codec_name,bit_rate,avg_frame_rate \
  -of default=nw=1 "clip_final.mp4"
Check that resolution, codec, and bitrate match expectations (no hidden downscale).