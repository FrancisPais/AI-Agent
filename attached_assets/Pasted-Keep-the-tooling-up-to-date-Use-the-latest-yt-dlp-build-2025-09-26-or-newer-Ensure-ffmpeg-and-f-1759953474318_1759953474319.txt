Keep the tooling up to date

Use the latest yt-dlp build (2025.09.26 or newer).

Ensure ffmpeg and ffprobe binaries are available in the runtime.

Set an env var pointing to the yt-dlp binary and confirm it is picked up in logs.

Always fetch the highest available source quality

In the downloader, explicitly request bestvideo+bestaudio and allow up to 4K/2160p.

Sort/choose formats by priority: resolution → fps → bitrate → codec (prefer AV1, then VP9, then H.264).

Merge containers without re-encoding during download; prefer MKV when the source is AV1/VP9.

Log the chosen video format for each job: resolution, fps, codec, and estimated bitrate.

Add a “source quality gate” before processing

Compute the true average bitrate of the downloaded file and log it.

Apply minimum recommended bitrates by resolution:

≥1080p: 3,000–5,000 kbps minimum

720p: 1,500–3,000 kbps minimum

480p: 1,000–1,500 kbps minimum

If the file is below the threshold, either fail the job with a clear status quality_too_low or continue with a prominent warning, according to product policy.

Avoid unnecessary upscaling

When converting to 9:16, only scale down; never scale above the source height.

Target 1080×1920 output only if the source has ≥1080 lines; otherwise keep a proportional 9:16 frame that matches the source height.

Use high-fidelity scaling and color settings

Apply high-quality resampling for the resize step (Lanczos).

Ensure the output pixel format is yuv420p for maximum device compatibility.

Use high-quality encoding settings for the cuts

Video: H.264 High Profile, CRF 16, preset “slow”.

Audio: AAC at 192 kbps.

Enable fast-start (moov atom at file head) for better streaming on social platforms.

Burn subtitles efficiently

Apply subtitle burn-in within the same filter chain as scaling/cropping.

Confirm subtitle timestamps are relative to the clip start (no drift).

Keep font size and outline suitable for 9:16 mobile viewing.

Keep only one generation per clip

Ensure the pipeline does: download → cut/scale/burn → final export.

Avoid creating intermediate re-encoded files that would degrade quality.

Use authenticated downloads when needed

Require each user’s YouTube cookies to be valid and present for the job.

Log when a download falls back to unauthenticated mode, as this can restrict available formats.

Operational limits and cleanup

Higher-quality sources are larger; verify disk quota for temporary files.

Clean up temporary files after each job and monitor worker concurrency to match available CPU.

Expect a noticeable increase in processing time when using high-quality settings; scale workers accordingly.

Diagnostics to keep in logs

Total chapters detected and whether the intro was skipped.

Chosen source: resolution, fps, codec, bitrate.

Computed source bitrate with size and duration.

Decision at the quality gate: proceed or fail.

Final output: resolution, encoded size, and average bitrate per clip.

Quick validation routine

Pick a known 1080p or 4K YouTube URL.

Run the pipeline and verify logs show a multi-Mbps source bitrate.

Inspect a few exported clips: edges/text should be crisp, with no excessive banding or softness.